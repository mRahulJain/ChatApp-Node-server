/*! firebase-admin v8.12.1 */
"use strict";
/*!
 * Copyright 2020 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var validator = require("../utils/validator");
var remote_config_utils_1 = require("./remote-config-utils");
var remote_config_api_client_1 = require("./remote-config-api-client");
/**
 * Internals of an RemoteConfig service instance.
 */
var RemoteConfigInternals = /** @class */ (function () {
    function RemoteConfigInternals() {
    }
    /**
     * Deletes the service and its associated resources.
     *
     * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.
     */
    RemoteConfigInternals.prototype.delete = function () {
        // There are no resources to clean up
        return Promise.resolve(undefined);
    };
    return RemoteConfigInternals;
}());
/**
 * Remote Config service bound to the provided app.
 */
var RemoteConfig = /** @class */ (function () {
    /**
     * @param {FirebaseApp} app The app for this RemoteConfig service.
     * @constructor
     */
    function RemoteConfig(app) {
        this.app = app;
        this.INTERNAL = new RemoteConfigInternals();
        this.client = new remote_config_api_client_1.RemoteConfigApiClient(app);
    }
    /**
    * Gets the current active version of the Remote Config template of the project.
    *
    * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when the template is available.
    */
    RemoteConfig.prototype.getTemplate = function () {
        return this.client.getTemplate()
            .then(function (templateResponse) {
            return new RemoteConfigTemplateImpl(templateResponse);
        });
    };
    /**
     * Validates a Remote Config template.
     *
     * @param {RemoteConfigTemplate} template The Remote Config template to be validated.
     *
     * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when a template is validated.
     */
    RemoteConfig.prototype.validateTemplate = function (template) {
        return this.client.validateTemplate(template)
            .then(function (templateResponse) {
            return new RemoteConfigTemplateImpl(templateResponse);
        });
    };
    /**
     * Publishes a Remote Config template.
     *
     * @param {RemoteConfigTemplate} template The Remote Config template to be validated.
     * @param {any=} options Optional options object when publishing a Remote Config template.
     *
     * @return {Promise<RemoteConfigTemplate>} A Promise that fulfills when a template is published.
     */
    RemoteConfig.prototype.publishTemplate = function (template, options) {
        return this.client.publishTemplate(template, options)
            .then(function (templateResponse) {
            return new RemoteConfigTemplateImpl(templateResponse);
        });
    };
    /**
     * Creates and returns a new Remote Config template from a JSON string.
     *
     * @param {string} json The JSON string to populate a Remote Config template.
     *
     * @return {RemoteConfigTemplate} A new template instance.
     */
    RemoteConfig.prototype.createTemplateFromJSON = function (json) {
        if (!validator.isNonEmptyString(json)) {
            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'JSON string must be a valid non-empty string');
        }
        var template;
        try {
            template = JSON.parse(json);
        }
        catch (e) {
            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', "Failed to parse the JSON string: " + json + ". " + e);
        }
        return new RemoteConfigTemplateImpl(template);
    };
    return RemoteConfig;
}());
exports.RemoteConfig = RemoteConfig;
/**
 * Remote Config template internal implementation.
 */
var RemoteConfigTemplateImpl = /** @class */ (function () {
    function RemoteConfigTemplateImpl(config) {
        if (!validator.isNonNullObject(config) ||
            !validator.isNonEmptyString(config.etag)) {
            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', "Invalid Remote Config template: " + JSON.stringify(config));
        }
        this.etagInternal = config.etag;
        if (typeof config.parameters !== 'undefined') {
            if (!validator.isNonNullObject(config.parameters)) {
                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');
            }
            this.parameters = config.parameters;
        }
        else {
            this.parameters = {};
        }
        if (typeof config.parameterGroups !== 'undefined') {
            if (!validator.isNonNullObject(config.parameterGroups)) {
                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');
            }
            this.parameterGroups = config.parameterGroups;
        }
        else {
            this.parameterGroups = {};
        }
        if (typeof config.conditions !== 'undefined') {
            if (!validator.isArray(config.conditions)) {
                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');
            }
            this.conditions = config.conditions;
        }
        else {
            this.conditions = [];
        }
    }
    Object.defineProperty(RemoteConfigTemplateImpl.prototype, "etag", {
        /**
         * Gets the ETag of the template.
         *
         * @return {string} The ETag of the Remote Config template.
         */
        get: function () {
            return this.etagInternal;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {RemoteConfigTemplate} A JSON-serializable representation of this object.
     */
    RemoteConfigTemplateImpl.prototype.toJSON = function () {
        return {
            conditions: this.conditions,
            parameters: this.parameters,
            parameterGroups: this.parameterGroups,
            etag: this.etag,
        };
    };
    return RemoteConfigTemplateImpl;
}());
