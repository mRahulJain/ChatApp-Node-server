/*! firebase-admin v8.12.1 */
"use strict";
/*!
 * Copyright 2020 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var api_request_1 = require("../utils/api-request");
var error_1 = require("../utils/error");
var remote_config_utils_1 = require("./remote-config-utils");
var utils = require("../utils/index");
var validator = require("../utils/validator");
// Remote Config backend constants
var FIREBASE_REMOTE_CONFIG_V1_API = 'https://firebaseremoteconfig.googleapis.com/v1';
var FIREBASE_REMOTE_CONFIG_HEADERS = {
    'X-Firebase-Client': 'fire-admin-node/8.12.1',
    // There is a known issue in which the ETag is not properly returned in cases where the request
    // does not specify a compression type. Currently, it is required to include the header
    // `Accept-Encoding: gzip` or equivalent in all requests.
    // https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates
    'Accept-Encoding': 'gzip',
};
var TagColor;
(function (TagColor) {
    TagColor["BLUE"] = "Blue";
    TagColor["BROWN"] = "Brown";
    TagColor["CYAN"] = "Cyan";
    TagColor["DEEP_ORANGE"] = "Red Orange";
    TagColor["GREEN"] = "Green";
    TagColor["INDIGO"] = "Indigo";
    TagColor["LIME"] = "Lime";
    TagColor["ORANGE"] = "Orange";
    TagColor["PINK"] = "Pink";
    TagColor["PURPLE"] = "Purple";
    TagColor["TEAL"] = "Teal";
})(TagColor = exports.TagColor || (exports.TagColor = {}));
/**
 * Class that facilitates sending requests to the Firebase Remote Config backend API.
 *
 * @private
 */
var RemoteConfigApiClient = /** @class */ (function () {
    function RemoteConfigApiClient(app) {
        this.app = app;
        if (!validator.isNonNullObject(app) || !('options' in app)) {
            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'First argument passed to admin.remoteConfig() must be a valid Firebase app instance.');
        }
        this.httpClient = new api_request_1.AuthorizedHttpClient(app);
    }
    RemoteConfigApiClient.prototype.getTemplate = function () {
        var _this = this;
        return this.getUrl()
            .then(function (url) {
            var request = {
                method: 'GET',
                url: url + "/remoteConfig",
                headers: FIREBASE_REMOTE_CONFIG_HEADERS
            };
            return _this.httpClient.send(request);
        })
            .then(function (resp) {
            if (!validator.isNonEmptyString(resp.headers['etag'])) {
                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');
            }
            return {
                conditions: resp.data.conditions,
                parameters: resp.data.parameters,
                parameterGroups: resp.data.parameterGroups,
                etag: resp.headers['etag'],
            };
        })
            .catch(function (err) {
            throw _this.toFirebaseError(err);
        });
    };
    RemoteConfigApiClient.prototype.validateTemplate = function (template) {
        var _this = this;
        this.validateRemoteConfigTemplate(template);
        return this.sendPutRequest(template, template.etag, true)
            .then(function (resp) {
            if (!validator.isNonEmptyString(resp.headers['etag'])) {
                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');
            }
            return {
                conditions: resp.data.conditions,
                parameters: resp.data.parameters,
                parameterGroups: resp.data.parameterGroups,
                // validating a template returns an etag with the suffix -0 means that your update 
                // was successfully validated. We set the etag back to the original etag of the template
                // to allow future operations.
                etag: template.etag,
            };
        })
            .catch(function (err) {
            throw _this.toFirebaseError(err);
        });
    };
    RemoteConfigApiClient.prototype.publishTemplate = function (template, options) {
        var _this = this;
        this.validateRemoteConfigTemplate(template);
        var ifMatch = template.etag;
        if (options && options.force == true) {
            // setting `If-Match: *` forces the Remote Config template to be updated
            // and circumvent the ETag, and the protection from that it provides.
            ifMatch = '*';
        }
        return this.sendPutRequest(template, ifMatch)
            .then(function (resp) {
            if (!validator.isNonEmptyString(resp.headers['etag'])) {
                throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');
            }
            return {
                conditions: resp.data.conditions,
                parameters: resp.data.parameters,
                parameterGroups: resp.data.parameterGroups,
                etag: resp.headers['etag'],
            };
        })
            .catch(function (err) {
            throw _this.toFirebaseError(err);
        });
    };
    RemoteConfigApiClient.prototype.sendPutRequest = function (template, etag, validateOnly) {
        var _this = this;
        var path = 'remoteConfig';
        if (validateOnly) {
            path += '?validate_only=true';
        }
        return this.getUrl()
            .then(function (url) {
            var request = {
                method: 'PUT',
                url: url + "/" + path,
                headers: __assign(__assign({}, FIREBASE_REMOTE_CONFIG_HEADERS), { 'If-Match': etag }),
                data: {
                    conditions: template.conditions,
                    parameters: template.parameters,
                    parameterGroups: template.parameterGroups,
                }
            };
            return _this.httpClient.send(request);
        });
    };
    RemoteConfigApiClient.prototype.getUrl = function () {
        return this.getProjectIdPrefix()
            .then(function (projectIdPrefix) {
            return FIREBASE_REMOTE_CONFIG_V1_API + "/" + projectIdPrefix;
        });
    };
    RemoteConfigApiClient.prototype.getProjectIdPrefix = function () {
        var _this = this;
        if (this.projectIdPrefix) {
            return Promise.resolve(this.projectIdPrefix);
        }
        return utils.findProjectId(this.app)
            .then(function (projectId) {
            if (!validator.isNonEmptyString(projectId)) {
                throw new remote_config_utils_1.FirebaseRemoteConfigError('unknown-error', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '
                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '
                    + 'environment variable.');
            }
            _this.projectIdPrefix = "projects/" + projectId;
            return _this.projectIdPrefix;
        });
    };
    RemoteConfigApiClient.prototype.toFirebaseError = function (err) {
        if (err instanceof error_1.PrefixedFirebaseError) {
            return err;
        }
        var response = err.response;
        if (!response.isJson()) {
            return new remote_config_utils_1.FirebaseRemoteConfigError('unknown-error', "Unexpected response with status: " + response.status + " and body: " + response.text);
        }
        var error = response.data.error || {};
        var code = 'unknown-error';
        if (error.status && error.status in ERROR_CODE_MAPPING) {
            code = ERROR_CODE_MAPPING[error.status];
        }
        var message = error.message || "Unknown server error: " + response.text;
        return new remote_config_utils_1.FirebaseRemoteConfigError(code, message);
    };
    /**
     * Checks if the given RemoteConfigTemplate object is valid.
     * The object must have valid parameters, parameter groups, conditions, and an etag.
     *
     * @param {RemoteConfigTemplate} template A RemoteConfigTemplate object to be validated.
     */
    RemoteConfigApiClient.prototype.validateRemoteConfigTemplate = function (template) {
        if (!validator.isNonNullObject(template)) {
            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', "Invalid Remote Config template: " + JSON.stringify(template));
        }
        if (!validator.isNonEmptyString(template.etag)) {
            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'ETag must be a non-empty string.');
        }
        if (!validator.isNonNullObject(template.parameters)) {
            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');
        }
        if (!validator.isNonNullObject(template.parameterGroups)) {
            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');
        }
        if (!validator.isArray(template.conditions)) {
            throw new remote_config_utils_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');
        }
    };
    return RemoteConfigApiClient;
}());
exports.RemoteConfigApiClient = RemoteConfigApiClient;
var ERROR_CODE_MAPPING = {
    ABORTED: 'aborted',
    ALREADY_EXISTS: "already-exists",
    INVALID_ARGUMENT: 'invalid-argument',
    FAILED_PRECONDITION: 'failed-precondition',
    NOT_FOUND: 'not-found',
    OUT_OF_RANGE: 'out-of-range',
    PERMISSION_DENIED: 'permission-denied',
    RESOURCE_EXHAUSTED: 'resource-exhausted',
    UNAUTHENTICATED: 'unauthenticated',
    UNKNOWN: 'unknown-error',
};
